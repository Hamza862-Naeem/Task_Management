// lib/data/providers.dart
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:task_management/services/firebase_task_service.dart';
import '../enums/status_enum.dart';
import '../models/task_model.dart';

final tasksProvider = StateNotifierProvider<TaskNotifier, List<Task>>((ref) => TaskNotifier());
// Provider for fetching tasks with inProgress status
final inProgressTasksProvider = Provider<List<Task>>((ref) {
  final tasks = ref.watch(tasksProvider);
  return tasks.where((task) => task.status == TaskStatus.inProgress).toList();
});


class TaskNotifier extends StateNotifier<List<Task>> {
  TaskNotifier() : super([]);
  final FirestoreService _firestoreService = FirestoreService();

  Future<void> addTask(Task task, String userId) async {
    await _firestoreService.addTask(task, userId);
    // Add the task to local state after successfully adding it to Firestore
    state = [...state, task.copyWith(id: null)]; // Set id to null since it will be generated by Firestore
  }

  Future<void> fetchTasks(String userId) async {
    final fetchedTasks = await _firestoreService.fetchTasks(userId);
    state = fetchedTasks; // Update local state with fetched tasks
  }
// Method to fetch inProgress tasks from Firestore
Future<void> fetchInProgressTasks(String userId) async {
  final allTasks = await _firestoreService.fetchTasks(userId);
  // Filter tasks with inProgress status
  final inProgressTasks = allTasks.where((task) => task.status == TaskStatus.inProgress).toList();
  state = inProgressTasks; // Update local state with inProgress tasks only
}

  Future<void> updateTaskStatus(Task task, String userId) async {
    await _firestoreService.updateTaskStatus(task, userId);
    // Update the local state to reflect the changes
    state = [
      for (final t in state)
        t.id == task.id ? task : t // Replace updated task in local state
    ];
  }

  Future<void> deleteTask(String taskId, String userId) async {
    await _firestoreService.deleteTask(taskId, userId);
    
    state = state.where((task) => task.id != taskId).toList();
  }

  void toggleProgressStatus(int index) {
    final currentTask = state[index];
    Task updatedTask;

    // Toggle task status
    if (currentTask.status == TaskStatus.pending) {
      updatedTask = currentTask.copyWith(status: TaskStatus.inProgress);
    } else {
      updatedTask = currentTask.copyWith(status: TaskStatus.pending);
    }

    // Update local state
    state[index] = updatedTask;
    // Optionally, update Firestore as well
    updateTaskStatus(updatedTask, currentTask.id!);
  }
}
